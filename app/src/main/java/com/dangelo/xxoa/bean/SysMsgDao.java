package com.dangelo.xxoa.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.dangelo.xxoa.dao.DaoSession;
import com.jiongbull.jlog.JLog;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS_MSG".
*/
public class SysMsgDao extends AbstractDao<SysMsg, Long> {

    public static final String TABLENAME = "SYS_MSG";

    /**
     * Properties of entity SysMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property Mynumber = new Property(2, String.class, "mynumber", false, "MYNUMBER");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Isread = new Property(5, String.class, "isread", false, "ISREAD");
        public final static Property Arg1 = new Property(6, String.class, "arg1", false, "ARG1");
        public final static Property Arg2 = new Property(7, String.class, "arg2", false, "ARG2");
    };


    public SysMsgDao(DaoConfig config) {
        super(config);
    }
    
    public SysMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS_MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE\" INTEGER," + // 1: date
                "\"MYNUMBER\" TEXT," + // 2: mynumber
                "\"TITLE\" TEXT," + // 3: title
                "\"CONTENT\" TEXT," + // 4: content
                "\"ISREAD\" TEXT," + // 5: isread
                "\"ARG1\" TEXT," + // 6: arg1
                "\"ARG2\" TEXT);"); // 7: arg2
        JLog.i("greenDAO", "createTable SYS_MSG " );
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS_MSG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SysMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        String mynumber = entity.getMynumber();
        if (mynumber != null) {
            stmt.bindString(3, mynumber);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String isread = entity.getIsread();
        if (isread != null) {
            stmt.bindString(6, isread);
        }
 
        String arg1 = entity.getArg1();
        if (arg1 != null) {
            stmt.bindString(7, arg1);
        }
 
        String arg2 = entity.getArg2();
        if (arg2 != null) {
            stmt.bindString(8, arg2);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SysMsg readEntity(Cursor cursor, int offset) {
        SysMsg entity = new SysMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mynumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // isread
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // arg1
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // arg2
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SysMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setMynumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsread(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setArg1(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setArg2(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SysMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SysMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
